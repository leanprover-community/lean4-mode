This is lean4-mode.info, produced by makeinfo version 7.1 from
lean4-mode.texi.

INFO-DIR-SECTION Emacs misc features
START-INFO-DIR-ENTRY
* Lean4-Mode: (lean4-mode). Emacs major mode for Lean4 language.
END-INFO-DIR-ENTRY


File: lean4-mode.info,  Node: Top,  Next: Installation,  Up: (dir)

Emacs Lean4-Mode
****************

This package extends GNU Emacs (https://www.gnu.org/software/emacs/) by
a major mode for Lean (https://lean-lang.org) version 4, a programming
language and theorem prover.

   Lean4-Mode is developed on Github
(https://github.com/leanprover-community/lean4-mode).  Bugs and feature
requests are also tracked there.  Further discussions take place in the
#Emacs (https://leanprover.zulipchat.com/#narrow/channel/468104-Emacs)
channel on the Lean Zulip chat platform.

* Menu:

* Installation::
* Usage::
* Configuration::
* Common Pitfalls::

-- The Detailed Node Listing --

Installation

* Brief and Generic Instructions::
* Detailed and Concrete Instructions::
* Instructions for Source-Based Use-Package::

Instructions for Source-Based Use-Package

* Native vc (Emacs 30 or later)::
* Doom package!::
* Straight::

Usage

* lsp-mode::
* Flycheck::

Configuration

* lsp-mode: lsp-mode (1).
* Flycheck: Flycheck (1).

Common Pitfalls

* Lean(3)-Mode::
* Partial value of lean4-mode-hook or other hook variables::



File: lean4-mode.info,  Node: Installation,  Next: Usage,  Prev: Top,  Up: Top

1 Installation
**************

* Menu:

* Brief and Generic Instructions::
* Detailed and Concrete Instructions::
* Instructions for Source-Based Use-Package::


File: lean4-mode.info,  Node: Brief and Generic Instructions,  Next: Detailed and Concrete Instructions,  Up: Installation

1.1 Brief and Generic Instructions
==================================

First, install the dependencies of Lean4-Mode:
   • Lean (https://lean-lang.org/lean4/doc/setup.html) (version 4)
   • Emacs (version 27 or later)
   • Emacs packages Dash (https://github.com/magnars/dash.el) (available
     on GNU-Elpa), lsp-mode (https://emacs-lsp.github.io/lsp-mode), and
     Magit-Section
     (https://github.com/magit/magit/blob/main/lisp/magit-section.el)
     (available on Melpa)

   Second, install Lean4-Mode itself:
   • Clone the Git repository of Lean4-Mode
     (https://github.com/leanprover-community/lean4-mode).
   • In your Emacs initialization file
     (https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html),
     add the path to that local repository to the ‘load-path’ list.


File: lean4-mode.info,  Node: Detailed and Concrete Instructions,  Next: Instructions for Source-Based Use-Package,  Prev: Brief and Generic Instructions,  Up: Installation

1.2 Detailed and Concrete Instructions
======================================

Install Lean version 4.

   Install Emacs version 27 or later.

   Install the Emacs packages Dash, lsp-mode and Magit-Section.  Dash is
the only one of these packages that is available in the default GNU Elpa
(https://elpa.gnu.org) package-archive.  You can install the remaining
packages either from source or from Melpa
(https://melpa.org/#/getting-started) package-archive.  For later
approach, add the following to your Emacs initialization file (e.g.
‘~/.emacs.d/init.el’):

     (require 'package)

     (add-to-list 'package-archives
                  '("melpa" . "https://melpa.org/packages/"))

     (add-to-list 'package-selected-packages 'dash)
     (add-to-list 'package-selected-packages 'lsp-mode)
     (add-to-list 'package-selected-packages 'magit-section)

     (package-refresh-contents)
     (package-install-selected-packages 'no-confirm)

   Clone the Git repository of Lean4-Mode:

     git clone https://github.com/leanprover-community/lean4-mode.git ~/path/to/lean4-mode

   In your Emacs initialization file, add the path to your local
Lean4-Mode repository to the ‘load-path’ list:
     (add-to-list 'load-path "~/path/to/lean4-mode")

   Lean4-Mode should now already be enabled when you open a file with
‘.lean’ extension.  But you can optionally also already load Lean4-Mode
on Emacs startup, e.g.  in order to customize variables:
     (require 'lean4-mode)

     ;; Optionally, customize variables, e.g. hooks:
     ;; (add-hook 'lean4-...-hook #'...)


File: lean4-mode.info,  Node: Instructions for Source-Based Use-Package,  Prev: Detailed and Concrete Instructions,  Up: Installation

1.3 Instructions for Source-Based Use-Package
=============================================

If you use a source-based package-manager (e.g.  ‘package-vc.el’,
Straight or Elpaca), then make sure to list the ‘"data"’ directory in
your Lean4-Mode package recipe.

   If you use the ‘use-package’ macro and intent to defer loading of
packages in order to improve your Emacs startup time, then make sure to
specify ‘lean4-mode’ as a ‘:command’.

   When customizing Lean4-Mode variables, make sure the customization
takes place after loading the Lean4-Mode package so that the variables
are correctly initialized first.  For example, many Lean4-Mode hook
variables like ‘lean4-mode-hook’ have non-nil initialization values.
And since ‘use-package’ applies the ‘:hook’ specifications before
package loading, you should avoid it.  Instead, put ‘(add-hook
'lean4-...-hook #'...)’ under the ‘:config’ section.  (See _Common
Pitfalls_ section below.)

   Following subsections show concrete examples.

* Menu:

* Native vc (Emacs 30 or later)::
* Doom package!::
* Straight::


File: lean4-mode.info,  Node: Native vc (Emacs 30 or later),  Next: Doom package!,  Up: Instructions for Source-Based Use-Package

1.3.1 Native ‘:vc’ (Emacs 30 or later)
--------------------------------------

GNU Emacs comes with ‘use-package.el’ built-in since version 29.  And
since version 30, it also comes with a built-in ‘:vc’ keyword for the
‘use-package’ macro that utilizes ‘package-vc.el’ to install Emacs
packages from remote source repositories.

     (require 'package)
     (add-to-list 'package-archives
                  '("melpa" . "https://melpa.org/packages/"))
     (package-initialize)

     (use-package lean4-mode
       :commands lean4-mode
       :vc ( :url "https://github.com/leanprover-community/lean4-mode.git"
             :rev :last-release
             ;; Or, if you prefer the bleeding edge version of Lean4-Mode:
             ;; :rev :newest
             ))


File: lean4-mode.info,  Node: Doom package!,  Next: Straight,  Prev: Native vc (Emacs 30 or later),  Up: Instructions for Source-Based Use-Package

1.3.2 Doom ‘package!’
---------------------

If you use Doom-Emacs, you can place the following code in your Doom
initialization file:

     (package! lean4-mode
               :recipe ( :host github
                         :repo "leanprover-community/lean4-mode"
                         :files ("*.el" "data")))


File: lean4-mode.info,  Node: Straight,  Prev: Doom package!,  Up: Instructions for Source-Based Use-Package

1.3.3 Straight
--------------

If you use the Straight package manager through Use-Package, then place
the following code in your Emacs initialization file:

     (use-package lean4-mode
       :commands lean4-mode
       :straight (lean4-mode :type git :host github
                             :repo "leanprover-community/lean4-mode"
                             :files ("*.el" "data")))


File: lean4-mode.info,  Node: Usage,  Next: Configuration,  Prev: Installation,  Up: Top

2 Usage
*******

If things are working correctly, you should see the word "Lean4" in
Emacs mode-line when you open a file with ‘.lean’ extension.  Emacs will
ask you to identify the _project_ this file belongs to.  If you then
type ‘#check id’, the word ‘#check’ will be underlined, and hovering
over it will show you the type of ‘id’.

   To view the proof state, run ‘lean4-info-mode’ (‘C-c C-i’).  This
will display the ‘*Lean4 Info*’ buffer (like the Lean Info-View pane in
VS-Code) in a separate window.

Key                      Description                                              Command
----------------------------------------------------------------------------------------------------------------
‘C-c C-k’                Echo the keystroke needed to input the symbol at point   ‘quail-show-key’
‘C-c C-d’                Recompile and reload imports                             ‘lean4-lsp-document-reopen’
‘C-c C-x’ or ‘C-c C-l’   Execute Lean4 in stand-alone mode                        ‘lean4-std-exe’
‘C-c C-p C-l’            Builds package with lake                                 ‘lean4-lake-build’
‘C-c C-i’                Toggle Info-View which shows goals and errors at point   ‘lean4-info-mode’

* Menu:

* lsp-mode::
* Flycheck::


File: lean4-mode.info,  Node: lsp-mode,  Next: Flycheck,  Up: Usage

2.1 lsp-mode
============

For key bindings from lsp-mode, see its respective documentation
(https://emacs-lsp.github.io/lsp-mode/page/keybindings/) and note that
not all capabilities are supported by Lean4-Mode.


File: lean4-mode.info,  Node: Flycheck,  Prev: lsp-mode,  Up: Usage

2.2 Flycheck
============

You may optionally use Lean4-Mode together with Flycheck.  In that case,
the mode-line will show ‘FlyC:E/N’, indicating that there are ‘E’ number
of errors and ‘N’ number of notes.  Following keys will be available by
default (via ‘flycheck-mode-map’):

Key         Description            Command
---------------------------------------------------------------
‘C-c ! n’   Go to next error       ‘flycheck-next-error’
‘C-c ! p’   Go to previous error   ‘flycheck-previous-error’


File: lean4-mode.info,  Node: Configuration,  Next: Common Pitfalls,  Prev: Usage,  Up: Top

3 Configuration
***************

* Menu:

* lsp-mode: lsp-mode (1).
* Flycheck: Flycheck (1).


File: lean4-mode.info,  Node: lsp-mode (1),  Next: Flycheck (1),  Up: Configuration

3.1 lsp-mode
============

If you want breadcrumbs of namespaces and sections to be shown in the
header-line, set the user option ‘lsp-headerline-breadcrumb-enable’ to
‘t’.


File: lean4-mode.info,  Node: Flycheck (1),  Prev: lsp-mode (1),  Up: Configuration

3.2 Flycheck
============

Flycheck is an optional but supported dependency of Lean4-Mode.  If
Flycheck is installed, lsp-mode and thus Lean4-Mode will by default use
it.  If you want to customize this behavior, e.g.  if you'd like to use
Emacs' built-in Flymake package instead of Flycheck while keeping later
installed, then customize the ‘lsp-diagnostics-provider’ user option
accordingly.


File: lean4-mode.info,  Node: Common Pitfalls,  Prev: Configuration,  Up: Top

4 Common Pitfalls
*****************

* Menu:

* Lean(3)-Mode::
* Partial value of lean4-mode-hook or other hook variables::


File: lean4-mode.info,  Node: Lean(3)-Mode,  Next: Partial value of lean4-mode-hook or other hook variables,  Up: Common Pitfalls

4.1 Lean(3)-Mode
================

Lean4-Mode only supports version 4 of Lean.  For editing Lean version 3,
use Lean3-Mode (https://github.com/leanprover/lean3-mode), which is also
known as Lean-Mode due to historical reasons.  In principle, it is fine
to have both Lean3-Mode and Lean4-Mode installed at the same time.  But
note that Lean3-Mode uses the prefix ‘lean-’ for its symbols.  E.g.  you
should not use ‘lean-’-prefixed commands in a buffer with Lean4-Mode as
major mode.


File: lean4-mode.info,  Node: Partial value of lean4-mode-hook or other hook variables,  Prev: Lean(3)-Mode,  Up: Common Pitfalls

4.2 Partial value of ‘lean4-mode-hook’ or other hook variables
==============================================================

If you customize a hook variable like ‘lean4-mode-hook’ e.g.  with
‘add-hook’ or Use-Package's ‘:hook’ keyword, you may end up with a
partial / incomplete value of the hook variable.  For example,
‘lean4-mode-hook’ may not contain the ‘lsp’ command and as a consequence
‘lsp-mode’ won't start automatically together with Lean4-Mode.

   There are several reasons that lead to this situation in conjunction:
(1.)  Lean4-Mode has non-nil initialization values for many of its hook
variables.  (2.)  Emacs evaluates your ‘add-hook’ form before it loads
the definition of the hook from Lean4-Mode package.  (3.)  ‘add-hook’
effectively initializes the passed hook-variable to nil when the symbol
has no value cell.  And (4.), Use-Package applies passed ‘:hook’
specifications before package loading.

   If you do not use Use-Package, the solution is to load Lean4-Mode
before calling ‘add-hook’, e.g.  with ‘require’:
     (require 'lean4-mode)
     (add-hook 'lean4-...-hook #'...)

   Or with ‘with-eval-after-load’:
     (with-eval-after-load 'lean4-mode
       (add-hook 'lean4-mode-hook #'...))
     (with-eval-after-load 'lean4-lsp
       (add-hook 'lean4-lsp-mode-hook #'...))

   If you do Use-Package, you can solve the problem by calling
‘add-hook’ within the ‘:config’ section:
     (use-package lean4-mode
       ;; ...
       :config
       (add-hook 'lean4-...-hook #'...))



Tag Table:
Node: Top224
Node: Installation1347
Node: Brief and Generic Instructions1590
Node: Detailed and Concrete Instructions2539
Node: Instructions for Source-Based Use-Package4291
Node: Native vc (Emacs 30 or later)5536
Node: Doom package!6452
Node: Straight6922
Node: Usage7425
Node: lsp-mode8847
Node: Flycheck9132
Node: Configuration9742
Node: lsp-mode (1)9932
Node: Flycheck (1)10201
Node: Common Pitfalls10686
Node: Lean(3)-Mode10892
Node: Partial value of lean4-mode-hook or other hook variables11516

End Tag Table


Local Variables:
coding: utf-8
End:
